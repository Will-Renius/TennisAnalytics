train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
# all.new.pred <- all.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(all.new.pred)
#
#  favorite.new.pred <- favorite.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(favorite.new.pred)
#
# underdog.new.pred <- underdog.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(underdog.new.pred)
#
# plot.a <- ggplot(all.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "All"))
#
# plot.f <- ggplot(favorite.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Favorites"))
#
#
# plot.u <- ggplot(underdog.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Underdogs"))
#
# print(plot.a)
# print(plot.f)
# print(plot.u)
}
for(i in 2017:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
# all.new.pred <- all.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(all.new.pred)
#
#  favorite.new.pred <- favorite.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(favorite.new.pred)
#
# underdog.new.pred <- underdog.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(underdog.new.pred)
#
# plot.a <- ggplot(all.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "All"))
#
# plot.f <- ggplot(favorite.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Favorites"))
#
#
# plot.u <- ggplot(underdog.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Underdogs"))
#
# print(plot.a)
# print(plot.f)
# print(plot.u)
}
plot.winnings <- function(df, title){
df.new.pred <- df %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
# print(all.new.pred)
plot.df <- ggplot(df.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(title)
print(plot.df)
}
for(i in 2017:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
# all.new.pred <- all.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(all.new.pred)
#
#  favorite.new.pred <- favorite.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(favorite.new.pred)
#
# underdog.new.pred <- underdog.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(underdog.new.pred)
#
# plot.a <- ggplot(all.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "All"))
#
# plot.f <- ggplot(favorite.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Favorites"))
#
#
# plot.u <- ggplot(underdog.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Underdogs"))
#
# print(plot.a)
# print(plot.f)
# print(plot.u)
}
for(i in 2017:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(odds.upset > 3 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, odds.upset > 3 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
# all.new.pred <- all.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(all.new.pred)
#
#  favorite.new.pred <- favorite.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(favorite.new.pred)
#
# underdog.new.pred <- underdog.pred %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
#
# print(underdog.new.pred)
#
# plot.a <- ggplot(all.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "All"))
#
# plot.f <- ggplot(favorite.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Favorites"))
#
#
# plot.u <- ggplot(underdog.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(paste(test.start.date, "Underdogs"))
#
# print(plot.a)
# print(plot.f)
# print(plot.u)
}
for(i in 2017:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(UMaxOdds > 3 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, odds.upset > 3 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
}
for(i in 2017:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(UMaxOdds > 3 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, UMaxOdds > 3 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
}
for(i in 2017:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(UMaxOdds > 4 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, UMaxOdds > 4 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "all"))
plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
}
for(i in 2010:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(UMaxOdds > 4 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, UMaxOdds > 4 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
#plot.winnings(all.pred, paste(test.start.date, "all"))
#plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
}
require(randomForest)
imputed.data <- men.data
imputed.data$favorite_won <- as.factor(!imputed.data$odds.upset)
character.columns <- c("Location", "Tournament", "Series", "Surface", "Court","Round" )
for(col.name in character.columns){
imputed.data[[col.name]]<- as.factor(imputed.data[[col.name]])
}
favorite.columns <- c("B365F", "B.WF" , "CBF" , "EXF" , "LBF" , "GBF" , "IWF" , "PSF" , "SBF" , "SJF" , "UBF" )
underdog.columns <- c("B365U", "B.WU" , "CBU" , "EXU" , "LBU" , "GBU" , "IWU" , "PSU" , "SBU" , "SJU" , "UBU")
for(col.name in favorite.columns){
imputed.data[[col.name]][is.na(imputed.data[[col.name]])] <- imputed.data[["avgF"]][is.na(imputed.data[[col.name]])]
}
for(col.name in underdog.columns){
imputed.data[[col.name]][is.na(imputed.data[[col.name]])] <- imputed.data[["avgU"]][is.na(imputed.data[[col.name]])]
}
imputed.data <- imputed.data %>% na.omit() %>% select(-maxWinOdds, -minLoseOdds, -maxProfit, -rank.upset, -year, -odds.upset, -Tournament, -Location)
str(imputed.data)
old.imputed.data <- imputed.data
imputed.data <-  imputed.data %>% dplyr::filter(UMaxOdds > 3)
plot.winnings <- function(df, title){
df.new.pred <- df %>% dplyr::filter(is.finite(winnings)) %>% arrange(date.new) %>% mutate(winnings = cumsum(winnings))
# print(all.new.pred)
plot.df <- ggplot(df.new.pred, aes(date.new, winnings)) + geom_line()+ xlab("Date") + ylab("Winnings") + ggtitle(title)
print(plot.df)
}
for(i in 2010:2017){
train.start.date <-  paste0(i-4, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(UMaxOdds > 4 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, UMaxOdds > 4 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
#plot.winnings(all.pred, paste(test.start.date, "all"))
#plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
}
for(i in 2010:2017){
train.start.date <-  paste0(i-7, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
# new.train <- sample_frac(train.imputed, .1, replace = F)
iris_rf = randomForest(favorite_won~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
bet <- 10
test.pred <- test.pred %>% mutate(maxProfit = case_when(favorite_won == "TRUE"  ~ bet * ( FMaxOdds - 1), favorite_won =="FALSE" ~ bet * (UMaxOdds - 1)  , TRUE ~ NA_real_))
test.pred <- test.pred %>% mutate( winnings = case_when(favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$favorite_won)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = case_when( favorite_won == prediction  ~ maxProfit,  favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
favorite.pred <- test.pred %>% mutate( winnings = case_when(prediction == "TRUE" & favorite_won == prediction  ~ maxProfit, prediction == "TRUE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
underdog.pred <- test.pred %>% mutate( winnings = case_when(prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
super.underdog.pred <- test.pred %>% mutate( winnings = case_when(UMaxOdds > 4 & prediction == "FALSE" & favorite_won == prediction  ~ maxProfit, UMaxOdds > 4 & prediction == "FALSE" & favorite_won != prediction ~ -bet, TRUE ~ NA_real_))
#used for making plot
#plot.winnings(all.pred, paste(test.start.date, "all"))
#plot.winnings(underdog.pred, paste(test.start.date, "underdog"))
plot.winnings(super.underdog.pred, paste(test.start.date, "super underdog"))
}
bet <- 1
imputed.data <-  imputed.data %>% mutate(upset.payout = case_when(favorite_won == "FALSE"  ~ bet * ( UMaxOdds - 1), favorite_won =="TRUE" ~ - bet, TRUE ~ NA_real_))
# new.train <- sample_frac(train.imputed, .1, replace = F)
for(i in 2010:2017){
train.start.date <-  paste0(i-7, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
iris_rf = randomForest(upset.payout~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
CM = table(irisPred, testData$upset.payout)
accuracy = (sum(diag(CM)))/sum(CM)
print(CM)
print(accuracy)
#make bets
all.pred <- test.pred %>% mutate( winnings = upset.payout) %>% dplyer::filter(prediction > 0)
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "upset payout"))
}
for(i in 2010:2017){
train.start.date <-  paste0(i-7, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
iris_rf = randomForest(upset.payout~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
predictions <- testData %>% group_by(prediction) %>% summarize(count = n())
print(predictions)
#make bets
all.pred <- test.pred %>% mutate( winnings = upset.payout) %>% dplyr::filter(prediction > 0)
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "upset payout"))
}
for(i in 2010:2017){
train.start.date <-  paste0(i-7, "-01-01", sep = '')
train.end.date <- paste0(i-1, "-01-01", sep = '')
test.start.date <- paste0(i, "-01-01", sep = '')
test.end.date <- paste0(i+1, "-01-01", sep = '')
print(test.start.date)
new.train <- imputed.data %>% dplyr::filter(date.new < as.Date(train.end.date), date.new >= as.Date(train.start.date))
iris_rf = randomForest(upset.payout~., data=new.train, ntree=20, proximity=T)
testData <- imputed.data %>% dplyr::filter(date.new > as.Date(test.start.date), date.new < as.Date(test.end.date))
irisPred = predict(iris_rf, newdata=testData)
test.pred <- testData
test.pred$prediction <- irisPred
#importance of each column
print(importance(iris_rf))
#view accuracy of predicting winner
predictions <- test.pred %>% group_by(prediction) %>% summarize(count = n())
#make bets
all.pred <- test.pred %>% mutate( winnings = upset.payout) %>% dplyr::filter(prediction > 0)
#used for making plot
plot.winnings(all.pred, paste(test.start.date, "upset payout"))
}
